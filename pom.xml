<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ubi.example</groupId>
    <artifactId>test-automated</artifactId>
    <version>1.0</version>

    <properties>
        <maven.compiler.source>22</maven.compiler.source>
        <maven.compiler.target>22</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring.version>6.1.3</spring.version>
        <spring.boot.version>3.2.1</spring.boot.version>
        <slf4j.version>2.0.11</slf4j.version>
        <log4j2.version>2.22.1</log4j2.version>
        <commons.logging.version>1.2</commons.logging.version>
        <citrus.version>4.1.0</citrus.version>
        <activemq.artemis.version>2.31.2</activemq.artemis.version>
        <activemq.version>6.1.2</activemq.version>
        <qpid.version>2.5.0</qpid.version>
        <system.under.test.mode>embedded</system.under.test.mode>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.0.2</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <failIfNoTests>false</failIfNoTests>
                    <workingDirectory>${project.build.directory}</workingDirectory>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <systemProperties>
                        <system.under.test.mode>${system.under.test.mode}</system.under.test.mode>
                        <todo.jms.enabled>true</todo.jms.enabled>
                        <todo.jms.broker>enabled</todo.jms.broker>
                    </systemProperties>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-tests</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
                <configuration>
                    <mainClass>com.consol.citrus.samples.todolist.TodoApplication</mainClass>
                    <useTestClasspath>false</useTestClasspath>
                    <jvmArguments>-Dtodo.jms.enabled=true</jvmArguments>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <!-- Dotenv Java: Loads environment variables from a `.env` file into the application -->
        <dependency>
            <groupId>io.github.cdimascio</groupId>
            <artifactId>dotenv-java</artifactId>
            <version>3.0.0</version>
        </dependency>

        <!-- Gson: A library to convert Java objects to JSON and vice versa -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.10.1</version>
        </dependency>

        <!-- Apache Qpid JMS Client: A JMS 2.0 client library for interacting with message brokers (e.g., ActiveMQ, RabbitMQ) using the AMQP protocol -->
        <dependency>
            <groupId>org.apache.qpid</groupId>
            <artifactId>qpid-jms-client</artifactId>
            <version>${qpid.version}</version>
        </dependency>

        <!-- Apache Qpid ProtonJ2: A client library for AMQP 1.0 messaging, provides lightweight messaging support -->
        <dependency>
            <groupId>org.apache.qpid</groupId>
            <artifactId>protonj2-client</artifactId>
            <version>1.0.0-M16</version>
        </dependency>

        <!-- SLF4J API: A facade for logging frameworks, allowing you to plug in any desired logging framework at deployment time -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <!-- JCL over SLF4J: A bridge between the Jakarta Commons Logging (JCL) API and SLF4J for test logging purposes -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Apache Log4j API: The API for the Log4j logging framework, used in test scope -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j2.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Log4j to SLF4J Adapter: Allows Log4j 2 to be used with the SLF4J API, also in the test scope -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j2-impl</artifactId>
            <version>${log4j2.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Commons Logging: A logging framework used by older libraries, provided scope because SLF4J or Log4j is preferred -->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>${commons.logging.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Spring Framework - Spring Test: Provides classes and utilities to test Spring components -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Citrus Framework Dependencies: Used for automated integration testing of messaging-based applications -->
        <!-- Citrus Core Module: Base module for Citrus containing the core functionalities -->
        <dependency>
            <groupId>org.citrusframework</groupId>
            <artifactId>citrus-base</artifactId>
            <version>${citrus.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Citrus Spring Integration: Enables integration of Citrus with the Spring Framework -->
        <dependency>
            <groupId>org.citrusframework</groupId>
            <artifactId>citrus-spring</artifactId>
            <version>${citrus.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Citrus Endpoint Catalog: Provides predefined endpoints (e.g., HTTP, JMS) for easier configuration -->
        <dependency>
            <groupId>org.citrusframework</groupId>
            <artifactId>citrus-endpoint-catalog</artifactId>
            <version>${citrus.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Citrus TestNG: Supports using TestNG framework for writing and running Citrus tests -->
        <dependency>
            <groupId>org.citrusframework</groupId>
            <artifactId>citrus-testng</artifactId>
            <version>${citrus.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Citrus HTTP: Provides HTTP client and server support for Citrus -->
        <dependency>
            <groupId>org.citrusframework</groupId>
            <artifactId>citrus-http</artifactId>
            <version>${citrus.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Citrus JMS: Provides JMS (Java Message Service) client and server support for Citrus -->
        <dependency>
            <groupId>org.citrusframework</groupId>
            <artifactId>citrus-jms</artifactId>
            <version>${citrus.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Citrus XML Validation: Supports XML validation for Citrus tests -->
        <dependency>
            <groupId>org.citrusframework</groupId>
            <artifactId>citrus-validation-xml</artifactId>
            <version>${citrus.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Citrus JSON Validation: Supports JSON validation for Citrus tests -->
        <dependency>
            <groupId>org.citrusframework</groupId>
            <artifactId>citrus-validation-json</artifactId>
            <version>${citrus.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Citrus Text Validation: Supports plain text validation for Citrus tests -->
        <dependency>
            <groupId>org.citrusframework</groupId>
            <artifactId>citrus-validation-text</artifactId>
            <version>${citrus.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

</project>